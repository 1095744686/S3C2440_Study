
led.elf：     文件格式 elf32-littlearm


Disassembly of section .text:

00000000 <_start>:
   0:	e3a0da01 	mov	sp, #4096	; 0x1000            		;设置栈指针大小为4096
   4:	eb000000 	bl	c <main>								;跳转到[0x0c]main函数,并保存返回地址(下一条指令的地址,即0x08)到LR中

00000008 <halt>:
   8:	eafffffe 	b	8 <halt>

0000000c <main>:
   c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)  ;fp的值存入[4096-4](4092)中,sp = sp-4 ==> 将【栈帧底部】指针fp压入栈中；创建属于main函数的栈帧。  
  10:	e28db000 	add	fp, sp, #0								;fp = sp+0 = 4092+0 = 4096 ==> fp指针为函数栈帧的底部
  14:	e24dd00c 	sub	sp, sp, #12								;sp = 4096-12 = 4084 ==> sp指针为【栈帧顶部】,同时为栈的栈顶
  18:	e59f3034 	ldr	r3, [pc, #52]	; 54 <main+0x48>   		;r3 = [0x18+8+52] = [0x54] 
  1c:	e50b3008 	str	r3, [fp, #-8]							;把r3(0x56000050)存放在[4088] ==> 保存局部变量
  20:	e59f3030 	ldr	r3, [pc, #48]	; 58 <main+0x4c>		;r3 = [0x20+8+48] = [0x58]
  24:	e50b300c 	str	r3, [fp, #-12]							;把r3(0x56000054)存放在[4084] ==> 保存局部变量
  28:	e51b3008 	ldr	r3, [fp, #-8]							;r3 = [0x4088] = 0x56000050 
  2c:	e3a02c01 	mov	r2, #256	; 0x100						;r2 = 0x100
  30:	e5832000 	str	r2, [r3]								;[r3] = 0x100 ==> 写入0x100至GPFCON寄存器
  34:	e51b300c 	ldr	r3, [fp, #-12]							;r3 = [0x4084] = 0x56000054
  38:	e3a02000 	mov	r2, #0									;r2 = 0
  3c:	e5832000 	str	r2, [r3]								;[r3] = 0 ==> 写入0至GPFDAT寄存器
  40:	e3a03000 	mov	r3, #0									;r3 = 0 ==> return 0的返回值存放先在r3
  44:	e1a00003 	mov	r0, r3									;r0 = 0 ==> return 0的返回值存放在r0
  48:	e28bd000 	add	sp, fp, #0								;sp = fp-0 = 4092 
  4c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)		;fp = [4092] ==> 恢复fp,sp = sp+4 = 4096 ==>恢复栈
  50:	e12fff1e 	bx	lr
  54:	56000050 			; <UNDEFINED> instruction: 0x56000050
  58:	56000054 			; <UNDEFINED> instruction: 0x56000054

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <__bss_end__+0x10c0cc8>
   4:	61522820 	cmpvs	r2, r0, lsr #16
   8:	69627073 	stmdbvs	r2!, {r0, r1, r4, r5, r6, ip, sp, lr}^
   c:	38206e61 	stmdacc	r0!, {r0, r5, r6, r9, sl, fp, sp, lr}
  10:	302e332e 	eorcc	r3, lr, lr, lsr #6
  14:	722b362d 	eorvc	r3, fp, #47185920	; 0x2d00000
  18:	29316970 	ldmdbcs	r1!, {r4, r5, r6, r8, fp, sp, lr}
  1c:	332e3820 			; <UNDEFINED> instruction: 0x332e3820
  20:	地址 0x00000020 越界。


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	06003605 	streq	r3, [r0], -r5, lsl #12
  14:	09010806 	stmdbeq	r1, {r1, r2, fp}
  18:	12020a01 	andne	r0, r2, #4096	; 0x1000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1c021a01 			; <UNDEFINED> instruction: 0x1c021a01
  28:	地址 0x00000028 越界。

